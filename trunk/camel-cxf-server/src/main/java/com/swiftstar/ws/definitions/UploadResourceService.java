
/*
 * 
 */

package com.swiftstar.ws.definitions;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.2.2
 * Fri Feb 26 15:37:44 PHT 2010
 * Generated source version: 2.2.2
 * 
 */


@WebServiceClient(name = "UploadResourceService", 
                  wsdlLocation = "http://localhost:8080/swiftstar/spring-ws/service.wsdl",
                  targetNamespace = "http://swiftstar.com/ws/definitions") 
public class UploadResourceService extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://swiftstar.com/ws/definitions", "UploadResourceService");
    public final static QName UploadResourceSoap11 = new QName("http://swiftstar.com/ws/definitions", "UploadResourceSoap11");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/swiftstar/spring-ws/service.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from http://localhost:8080/swiftstar/spring-ws/service.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public UploadResourceService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public UploadResourceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public UploadResourceService() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     * 
     * @return
     *     returns UploadResource
     */
    @WebEndpoint(name = "UploadResourceSoap11")
    public UploadResource getUploadResourceSoap11() {
        return super.getPort(UploadResourceSoap11, UploadResource.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UploadResource
     */
    @WebEndpoint(name = "UploadResourceSoap11")
    public UploadResource getUploadResourceSoap11(WebServiceFeature... features) {
        return super.getPort(UploadResourceSoap11, UploadResource.class, features);
    }

}
